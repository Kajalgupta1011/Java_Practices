Functions - Smallest digits
Easy

Time Limit: 2 sec
Memory Limit: 128000 kB

Problem Statement
Let's define two functions G(X) and F(X) where G(X) will give us the closest prime greater than or equal to X and F(X) will give us the smallest digit (0-9) in X.

Given two integers N and M, Your task is to print the value the sum of values of F(G(i)) for each I from N to M.

Note:-
We have already provided you the function G(X) which returns the closest prime greater than or equal to X. To use the given function you have to call next_prime(x).

Note:- Do not close your main class.

Input
The input contains two space- separated integers depicting the values of N and M.

Constraints:-
1 <= N <= M <= 10000

Output
Print the sum of F(G(i)) for each i from N to M.

Example
Sample Input:-
1 10

Sample Output:-
34

Explanation:-
Numbers:- 1 2 3 4 5 6 7 8 9 10
G(i):- 2 2 3 5 5 7 7 11 11 11
F(G(i)):- 2 2 3 5 5 7 7 1 1 1
Sum=34

Sample Input:-
8 11

Sample Output:-
4

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework
import java.lang.Math;
// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();

		int arrlength = (m-n)+1;
		int i = 0, ans = 0;

		int arr[] = new int[arrlength];
		arr[i] = n;
		
		do{
			i++;
			n++;
			arr[i] = n;
		} while(n!=m);

		for(i=0; i<arrlength; i++) {
			arr[i] = next_prime(arr[i]);
			if(arr[i]>10)
				arr[i] = digit(arr[i]);
			ans += arr[i];
		}
		System.out.println(ans);
	}

	public static int min(int x, int y) {
		return x > y ? y : x;
	}
	
	public static int digit(int n) {
		int maxIndex = 9;
		int lastDigit;
		while(n!=0) {
			lastDigit = n%10;
			n /= 10;
			if(lastDigit <= maxIndex)
			maxIndex = lastDigit;
			maxIndex = min(lastDigit, maxIndex);
		}
		return maxIndex;
	}
