Median of Two sorted Arrays
Medium

Time Limit: 2 sec
Memory Limit: 128000 kB

Problem Statement
Given two sorted arrays A and B of size n and m respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n))

Input
First line of input contains n, m the length of array A and B.
Next two lines contains input of array A and B.

Constraints
1 <= n, m <= 1000
-1e6 <= A[i], B[i] <= 1e6

Output
Print the median of two sorted arrays upto two decimal places.

Example
Sample Input :
2 1
1 3
2

Sample Output :
2.00

---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework
class Main {
	public static void main (String[] args) {
		       Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int arr[]= new int[n];
        int arr2[]= new int[m];
        for(int i=0; i<n; i++){
            arr[i]=sc.nextInt();
        }
        for(int i=0; i<m;i++){
            arr2[i]=sc.nextInt();
        }
        System.out.printf("%.2f", median(arr,arr2,n,m));
    }
    public static double median(int[]arr, int[]arr2, int n, int m){
        int arr3[] = new int[n+m];
        int i=0,j=0,k=0;
        while(i<n && j<m){
            if(arr[i]<arr2[j]){
                arr3[k]=arr[i];
                k++;
                i++;
            }
            else{
                arr3[k]=arr2[j];
                k++;
                j++;
            }
        }
        if(i<n) {
            while (i < n) {
                arr3[k] = arr[i];
                k++;
                i++;
            }
        }
        if(j<m){
            while(j<m){
                arr3[k]=arr2[j];
                k++;
                j++;
            }
        }
         int z= (n+m)/2;
        if((n+m) % 2 == 1) return arr3[z];
        else
            return (((double)arr3[z-1] + (double)arr3[z])/2.0);
    }
}
