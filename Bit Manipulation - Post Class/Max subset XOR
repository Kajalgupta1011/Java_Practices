
Max subset XOR
Hard

Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Given a set of positive integers. Find the maximum xor of a non-empty subset from the given set.
Input
The first line contains an integer N denoting the number of elements in the set.
The next line contains N integers denoting the elements of the set.

1 <= N <= 10^5
1 <= Elements of set <= 10^9
Output
Print the maximum subset Xor.
Example
Sample Input:
3
2 4 5

Sample Output:
7

Explanation:
Subset {2, 5} has the maximum xor

Sample Input:
3
9 8 5

Sample Output:
13

Explanation:
Subset {8, 5} has the maximum xor
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
import java.util.*;

class Main {

    static final int INT_BITS = 32;
    
    static int maxSubarrayXOR(int arr[], int n)
    {
    	
    	int index = 0;
    
    	for (int i = INT_BITS - 1; i >= 0; i--)
    	{
    	
    	int maxInd = index;
    	int maxEle = Integer.MIN_VALUE;
    	for (int j = index; j < n; j++) {
    		
    		if ((arr[j] & (1 << i)) != 0 && arr[j] > maxEle)
    		{
    		maxEle = arr[j];
    		maxInd = j;
    		}
    	}
    
    	if (maxEle == -2147483648)
    		continue;
    
    	int temp = arr[index];
    	arr[index] = arr[maxInd];
    	arr[maxInd] = temp;
    
    	maxInd = index;
    
    	for (int j = 0; j < n; j++) {
    		
    		if (j != maxInd && (arr[j] & (1 << i)) != 0)
    		arr[j] = arr[j] ^ arr[maxInd];
    	}
    	
    	index++;
    	}
    
    	int res = 0;
    	for (int i = 0; i < n; i++)
    	res ^= arr[i];
    	return res;
    }
    
    public static void main(String arg[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
    	int arr[] = new int[n];
    	for(int k = 0; k < n; k++){
    	    arr[k] = sc.nextInt();
    	}
    	System.out.println(maxSubarrayXOR(arr, n));
    }
}
