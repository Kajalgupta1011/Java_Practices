Simple Prime (Contest)
Simple Prime (Contest)
Medium

Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Let's define P[i] as the ith Prime Number. Therefore, P[1]=2, P[2]=3, P[3]=5, so on.
Given two integers L, R (L<=R), find the value of P[L]+P[L+1]+P[L+2]...+P[R].
Input
The first line of the input contains an integer T denoting the number of test cases.
The next T lines contain two integers L and R.

Constraints
1 <= T <= 50000
1 <= L <= R <= 50000
Output
For each test case, print one line corresponding to the required value
Example
Sample Input
4
1 3
2 4
5 5
1 5

Sample Output
10
15
11
28

---------------------------------------------------------------
---------------------------------------------------------------
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	static void sieve(boolean prime[], long store[], int n){
		for(int i = 2; i <= n; i++){
			prime[i] = true;
		}
		for(int i = 2; i*i <= n; i++){
			if(prime[i]){
				for(int j = i*i; j <= n; j += i){
					prime[j] = false;
				}
			}
		}
		int ind = 1;
		for(int i = 1; i < n; i++){
			if(prime[i]){
				store[ind++] = i;
			}
			if(ind == 50005){
				break;
			}
		}
		for(int i = 1; i < ind; i++){
			store[i] += store[i - 1];
		}
	}
	public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
		int n = 10000001;
		boolean prime[] = new boolean[n + 1];
		long store[] = new long[50005];

		sieve(prime, store, n);

		int T = sc.nextInt();
		int l, r;
		for(int t = 0; t < T; t++){
			l = sc.nextInt();
			r = sc.nextInt();
			
			System.out.println(store[r] - store[l - 1]);
		}
	}
}
