Add two numbers
Medium

Problem Statement
Two numbers are represented in Linked List such that each digit corresponds to a node in linked list. Your task is to add these two numbers and return the sum in a linked list.

Note:-Linked list representaion of a number is from left to right i.e if the number is 123 than in linked list it is represented as 3->2->1
Input
User Task:
Since this will be a functional problem, you don't have to take input. You just have to complete the function addNumber() that takes head nodes of both the linked lists as parameter.

Constraints:
1 <=numbers<=10^1000
Output
Return the head of modified linked list.
Example
Sample Input:-
1234 45643


Sample Output:-
46877

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
/*
class Node {
    Node next;
    int data;

    Node(int data) {
        this.data = data;
        next = null;
    }
}
*/

static Node addNumber(Node first, Node second){
  Node count1 = first;
  int size1 = 1;
  Node count2 = second;
  int size2 = 1;

  while(count1.next != null){
    count1 = count1.next;
    ++size1;
  }

  while(count2.next != null){
    count2 = count2.next;
    ++size2;
  }

  Node currFirst = first;
  Node currSecond = second;
  Node resHead = null;
  int carry = 0, sum;
 
 // Second linked list is equal or greater then first linked list
  if(size2 >= size1){
    resHead = second;
    Node prev = second;
    while(currFirst != null){
      sum = carry + currFirst.data + currSecond.data;
      
      if(sum>=10)
        carry = 1;
      else
        carry = 0;
      
      currSecond.data = sum%10;
      currFirst = currFirst.next;
      currSecond = currSecond.next;
      
      if(prev.next != null)
        prev = prev.next;
    }

    while(prev.next != null)
      prev = prev.next;

    while(carry == 1 && currSecond != null){
      sum = carry + currSecond.data;
      if(sum >= 10)
        carry = 1;
      else
        carry = 0;

      currSecond.data = sum%10;
      currSecond = currSecond.next;
    }
    if(carry == 1){
      Node newNode = new Node(carry);
      prev.next = newNode;
      //prev = newNode;
    }

  }

  // First linked list greater then second linked list
  else{
    resHead = first;
    Node prev = first;
    while(currSecond != null){
      sum = carry + currFirst.data + currSecond.data;
      
      if(sum>=10)
        carry = 1;
      else
        carry = 0;
      
      currFirst.data = sum%10;
      currSecond = currSecond.next;
      currFirst = currFirst.next;

      if(prev.next != null)
        prev = prev.next;
    }
    
    while(prev.next != null)
      prev = prev.next;

    while(carry == 1 && currFirst != null){
      sum = carry + currFirst.data;
      if(sum >= 10)
        carry = 1;
      else
        carry = 0;

      currFirst.data = sum%10;
      currFirst = currFirst.next;
      //prev = prev.next;
    }
    if(carry == 1){
      Node newNode = new Node(carry);
      prev.next = newNode;
      //prev = newNode;
    }
  }

  return resHead;
}
