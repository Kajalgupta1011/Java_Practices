
Add 1 to a number represented as linked list
Medium

hint
Hint

Problem Statement
A number (n) is represented in Linked List such that each digit corresponds to a node in linked list. Add 1 to it.

Note:- Linked list representation of a number is from left to right i.e if the number is 123 than in linked list it is represented as 3->2->1
Input
User Task:
Since this will be a functional problem, you don't have to take input. You just have to complete the function addOne() that takes head node of the linked list as parameter.

Constraints:
1 <=length of n<= 1000
Output
Return the head of the modified linked list.
Example
Input 1:
456

Output 1:
457

Input 2:
999

Output 2:
1000
--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
/*
class Node {
    Node next;
    int data;

    Node(int data) {
        this.data = data;
        next = null;
    }
}
*/
static Node newNode(int data) 
{
    Node new_node = new Node();
    new_node.data = data;
    new_node.next = null;
    return new_node;
}
static int addWithCarry(Node head)
{

    // If linked list is empty, then
    // return carry
    if (head == null)
        return 1;

    // Add carry returned be next node call
    int res = head.data + addWithCarry(head.next);

    // Update data and return new carry
    head.data = (res) % 10;
    return (res) / 10;
}
  static Node addOne(Node head){
      // Add 1 to linked list from end to beginning
		int carry = addWithCarry(head);

		// If there is carry after processing all nodes,
		// then we need to add a new node to linked list
		if (carry > 0)
		{
			Node newNode = newNode(carry);
			newNode.next = head;
			return newNode; // New node becomes head now
		}

		return head;

        while (node != null)
        {
            System.out.print(node.data);
            node = node.next;
        }
        System.out.println();
}
